import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';

import 'core/bloc/app_bloc_observer.dart';
import 'core/di/injection.dart';
import 'core/theme/app_theme.dart';
import 'presentation/blocs/game/game_bloc.dart';
import 'presentation/blocs/game/game_event.dart';
import 'presentation/blocs/settings/settings_bloc.dart';
import 'presentation/blocs/theme/theme_bloc.dart';
import 'presentation/blocs/theme/theme_event.dart';
import 'presentation/blocs/theme/theme_state.dart';
import 'routes/app_router.dart';

void main() async {
  WidgetsFlutterBinding.ensureInitialized();

  // Set up BLoC observer for debugging and logging
  Bloc.observer = const AppBlocObserver(enableVerboseLogging: true);

  // Initialize dependency injection
  // Note: injection.config.dart is generated by build_runner
  // Run: flutter pub run build_runner build --delete-conflicting-outputs
  configureDependencies();

  runApp(const TicTacToeApp());
}

class TicTacToeApp extends StatelessWidget {
  const TicTacToeApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiBlocProvider(
      providers: [
        // Theme BLoC - manages app theme preferences
        BlocProvider<ThemeBloc>(
          create: (context) =>
              getIt<ThemeBloc>()..add(const ThemeInitialized()),
        ),
        // Game BLoC - manages game state with lifecycle-aware persistence
        // GameBloc internally manages AppLifecycleObserver for auto-save
        // on app pause/detach. Load saved state on startup.
        BlocProvider<GameBloc>(
          create: (context) =>
              getIt<GameBloc>()..add(const LoadSavedGameState()),
        ),
        // Settings BLoC - manages app settings
        BlocProvider<SettingsBloc>(create: (context) => getIt<SettingsBloc>()),
      ],
      child: BlocBuilder<ThemeBloc, ThemeState>(
        builder: (context, themeState) {
          return MaterialApp.router(
            title: 'Tic-Tac-Toe',
            debugShowCheckedModeBanner: false,
            theme: AppTheme.lightTheme,
            darkTheme: AppTheme.darkTheme,
            themeMode: themeState.themeMode,
            routerConfig: AppRouter.router,
          );
        },
      ),
    );
  }
}
